#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011 Björn Edström <be@bjrn.se>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import logging
import optparse
import sys

import pyker.poker as poker


log = logging.getLogger(__name__)


# An OptionParser that doesn't strip new-lines from epilog.
class OptionParserVerbatimEpilog(optparse.OptionParser):
    def format_epilog(self, formatter):
        return self.epilog


def usage():
    return 'usage: %prog [options] command [command-options]'


def epilog():
    return """
Commands:
  classify           classify the given hand(s)
  best               given seven cards (or two and --community)
                     decide the best
"""


def main():
    parser = OptionParserVerbatimEpilog(usage=usage(), epilog=epilog())
    parser.add_option('-c', '--community', dest='community', metavar='CARDS', help='community cards')
    options, args = parser.parse_args()

    try:
        cmd, args = args[0], args[1:]
    except:
        parser.error('no command given')

    com_cards = options.community or ''

    if cmd == 'classify':
        if com_cards:
            print >> sys.stderr, 'WARN: --community ignored for "classify" command'
        for arg in args:
            try:
                c = poker.string_to_cards(arg)
                h = poker.Hand(c)
                print h.classify().score(), h.classify()
            except AssertionError:
                parser.error('"classify" command requires 5 cards given')

    elif cmd == 'best':
        for arg in args:
            inp = arg + ' ' + com_cards if com_cards else arg
            c = poker.string_to_cards(arg + ' ' + com_cards if com_cards else arg)
            h = poker.Hand.best_from_seven(*c)
            print h.classify().score(), h.classify()


if __name__ == '__main__':
    main()
